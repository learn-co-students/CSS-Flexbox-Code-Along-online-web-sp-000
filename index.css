html,
body {
  margin: 0;
  padding: 0;
}

header {
  background-color: #FBFFF4;
  flex-shrink: 0;
  height: 80px;
  /*though this is a child of a container that is display:flex,
   u can still set fixed heights. 
  then it wont be shrinking and stretching. 
  edit: it won't change significantly but still a little. unless u do something about that
  
  the other items will shrink and stretch*/
  /*if we set a percentage what would that means?
  it's abit weird to think of this. 10% of what? 
  its 10% of the container, if the container has a height. 
  otherwise it takes as much space as it needs only. */
  width: 100%;

}

main {
  background-color: #92C9D5;
  width: 100%;
  height: 100%;
  display: flex;
  /*flex-wrap: wrap;
  flex-direction: row; */
  flex-flow: row wrap; /*shorthand for flex wrap and direction*/
  justify-content: center; /*"horizontal", more precisely, in the flex direction, the main axis*/
  /*other otpions: flex-start, flex-end, space-around, space-between*/
  align-items: center; /*options: stretch, baseline, flex=start, flex-end*/
  /*stretch will stretch to the whole "height"/along the minor axis. this option will make sense for visual looks, not for chunks of text with uncertain length*/

  align-content: center; /*this is relevant when wrapping happens. when you have boxes getting wrapped to the next line*/
  /*the default is space-around*/
}

footer {
  background-color: #DAEEEF;
  height: 80px;
  width: 100%;
  flex-shrink: 3;

}

.flex-container {
  display: flex;
  width: 100vw;
  height: 100vh;
  /*height and width of viewport! */
   /*usually the direction is across. in a row*/
   flex-direction: column;
}

.item {
  margin: 5px;
  width: 100px;
  height: 100px;
  background-color: #FCF2EC;
}

.setWidth {
  flex-basis: 100px;
  flex-grow: 1;
} 